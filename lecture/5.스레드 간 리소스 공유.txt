스레드가 프로세스 내에서 공유할 수 있는 리소스 = 힙에 저장하는 모든 항목 (객체, 클래스 멤버, 스태틱 변수 등...)

[스레드가 리소스 공유를 하는 이유(예시)]
1. 텍스트 편집기 프로그램의 중간 저장 스레드 (텍스트 편집기 내 자료구조를 접근함)
2. 디스패처 스레드
    입력 -> 워커 디스패처 -> 워커 큐 -> 워커 스레드 (작업이 끝나기를 기다렸다가, 큐에 작업이 도착하면 작업을 시작함. 이렇게 하면 작업이 도착할 때마다 스레드 생성할 필요 없음 )
3. 백엔드 서비스를 사용하는 멀티스레드 간 데이터 베이스 커넥션 공유 (커넥션 맺는 비용 줄임)

[리소스 공유의 단점]
원자적 작업이 아닌 경우 리소스 공유 시, 원하는 값으로 나오지 않음...
왜냐하면 모든 스레드가 접근 할 수 있는 값이 되기 때문임

원자적 작업 : all or nothing

items ++ 작업은 사실 어셈블리어 수준에서는 3가지 작업이 일어난다. load->increment->save
그래서 원자적 작업이 아님.

이 작업은 각 단계에서 스레드가 바뀌면 공유 변수가 다르게 바뀐다...

