[세마포어]
    - 리소스 하나에 사용자 하나만 제한하는 락과 달리, 세마포어는 사용자 수가 많든 적든 사용자 수를 리소스에 제한할 수 있다.
    - 세마포어는 리소스에 대한 접근을 제어하는 카운터 역할을 한다.
    - 락은 카운터가 하나인 세마포어로 볼 수 있다.

    (세마포어와 락의 차이점)
        - 세마포어는 소유자 스레드 개념이 없다. (스레드 여러개가 허가를 얻기 떄문) <- reentrant하지 않다.
        - 어떤 스레드이든지 세마포어를 릴리스한다. (세마포어를 얻지 못하는 스레드도 세마포어를 릴리스할 수 있는 버그가 발생가능. 세마포어 코드 작성 시 유의!)

    (세마포어 예시) - 생산자 소비자 각각 1개씩
    다음 코드는 세마포어를 사용해 안전하게 생산자와 소비자를 구현한 코드이다.
    '''java
    Semaphore full = new Semaphore(0);
    Semaphore empty = new Semaphore(1);
    Item item=null;

    Producer :
    while (true){
        empty.acquire();
        item = produceItem();
        full.release();
    }

    Consumer :
    while (true){
        full.acquire();
        consumeItem(item);
        empty.release();
    }
    '''

    (세마포어 예시) 생산자 소비자 각각 n개씩
    큐를 이용해 구현한 코드다.
    '''java
    Semaphore full = new Semaphore(0);
    Semaphore empty = new Semaphore(CAPACITY);
    Queue queue=new ArrayDeque();
    Lock lock=new ReentrantLock();

    Producer :
    while (true){
        empty.acquire();
        lock.lock();
        queue.offer(item);
        lock.unlock();
        full.release();
    }

    Consumer :
    while (true){
        full.acquire();
        lock.lock();
        Item item=queue.poll();
        lock.unlock();
        empty.release();
    }
    '''
    위와 같은 코드를 사용하는 예시
    1. 액터 모델을 사용하는 스레드와 프레임워크 간에 작업을 나눌 떄 사용
    2. 소켓 채널로 작업한 웹앱에서 사용 (소캣 체널이 대응하는 핸들러에 전달됨)


