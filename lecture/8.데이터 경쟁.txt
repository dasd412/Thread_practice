[레이스 컨디션]
    - 여러 개의 스레드가 공유 자원에 접근하는 상황
    - 공유 자원에 비원자적 연산이 실행됨으로써 원하지 않는 결과를 초래함.

    (해결 방법)
    레이스 컨디션 발생하는 영역 알아내기 -> 해당 영역 synchronized 처리

[Data Race]
    - 컴파일러와 cpu가 성능 최적화를 위해 명령어를 비순차적으로 처리하는 경우가 있음. (분기 예측 능력 향상 등을 위해 사용함.)

    (Data Race 가 일어나지 않는 사례)
    다음 코드는 각 명령어가 이전 명령어에 영향을 받기 때문에 순차적으로 처리해야 한다. 이 때는 Data Race가 발생하지 않는다.
    '''
    function(){
        x=1;
        y=x+2;
        z=y+10;
    }
    '''
    (Data Race 가 일어나는 사례)
    다음 코드는 컴파일러가 순차적으로 처리할 필요가 없다고 판단해서 데이터 경쟁이 발생할 수 있다.
    '''
    function1(){
        x++;
        y++;
    }
    function2(){
        y++;
        x++;
    }
    '''

    (해결 방법)
    - 1. synchronized 키워드를 사용해서 동시 실행에 대응
    - 2. 공유 변수에 volatile 키워드 적용 (volatile 변수 접근 전 코드가 접근 명령을 수행하기 전에 실행되도록 함. 접근 명령 이후에 volatile 변수 접근 후의 코드가 실행되도록 함)

[결론]
적어도 한 스레드에 의해 수정된 모든 공유 변수는 synchronized 블록이나 volatile 키워드로 보호해야 함.