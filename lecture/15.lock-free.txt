[락의 문제]
1. 데드락 문제 (애플리케이션에 락이 많을수록 데드락이 걸릴 확률이 높음)
2. slow critical section (락이 걸린 코드가 많을수록 critical section이 길어짐), 모든 스레드가 작업 시간이 가장 느린 스레드만큼 길어지게 됨...
3. 우선 순위 역전 문제
4. 스레드가 락을 지닌 채 죽는 문제 (락을 잡고 죽으면 락이 풀리지 않음)
5. 성능 오버헤드 문제 (락을 얻기 위해 스레드끼리 경쟁하면서 성능에 문제가 생김)

[Lock free technique]
- 단일 하드웨어 명령어로 실행할 수 있게 보증하는 것
- 원자적 연산이라는 것은 스레드 안전하다는 것

[AtomicInteger]

```java
int initialValue = 0;

AtomicInteger atomicInteger = new AtomicInteger(initialValue);

//atomically increment by one
atomicInteger.incrementAndGet(); // return the new value
atomicInteger.getAndIncrement(); // return the old value
```

[이러한 원자적 연산의 장단점]
- 장점 : 락을 사용하지 않고도 스레드 안전한 코드를 작성할 수 있음. 간단함.
- 단점 : atomic 메서드를 다른 연산과 함께 원자적으로 실행 못함!

[각 변수에 대한 개별 작업이 원자적이여도 이를 집합으로 만드는 작업은 원자적이지 않음]

아래 코드에서 일부 작업은 atomic 연산을 사용해서 스레드 안전 상태가 되긴 했다.
하지만 2개의 변수를 읽거나 수정하는 경우, 이는 원자적이지 않음.

'''java
public class Metric {
    private AtomicLong count = new AtomicLong(0);
    private AtomicLong sum = new AtomicLong(0);

    public void addSample(long sample) {
        sum.addAndGet(sample);
        count.incrementAndGet();
    }

    public double getAverage() {
        double average = (double)sum.get()/count.get(); // <- 이 부분이 원자적이지 않음
        reset();
        return average;
    }

    private void reset() {
        count.set(0);
        sum.set(0);
    }
}
'''

[AtomicReference]
- 클래스의 객체에 대한 레퍼런스를 감싸줘서 해당 레퍼런스에서 원자적 연산을 수행할 수 있게 함.
- compareAndSet 연산을 수행할 수 있음. 이는 이 강의 모든 내용에서 가장 중요한 내용

[compareAndSet]
- compareAndSet 메서드는 두 개의 인자를 받음. 첫 번째 인자는 기존의 값, 두 번째 인자는 새로운 값
- 만약 기존의 값이 두 번째 인자와 같다면 새로운 값으로 바꿔줌. 그리고 true를 리턴함.
- 만약 기존의 값이 두 번째 인자와 다르다면 아무것도 하지 않음. 그리고 false를 리턴함.